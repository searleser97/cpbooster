"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[884],{2919:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>d,default:()=>u,frontMatter:()=>r,metadata:()=>o,toc:()=>a});const o=JSON.parse('{"id":"debug","title":"Debug","description":"cpbooster provides a way for you to run your program using your debugging","source":"@site/docs/debug.mdx","sourceDirName":".","slug":"/debug","permalink":"/cpbooster/docs/debug","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/edit/master/website/docs/debug.mdx","tags":[],"version":"current","frontMatter":{"id":"debug","title":"Debug"},"sidebar":"docs","previous":{"title":"Test","permalink":"/cpbooster/docs/test"},"next":{"title":"Submit","permalink":"/cpbooster/docs/submit"}}');var t=i(4848),s=i(8453),c=i(9030);const r={id:"debug",title:"Debug"},d=void 0,l={},a=[{value:"Demo",id:"demo",level:4},{value:"Executable File Details",id:"executable-file-details",level:3},{value:"Debug With Input File",id:"debug-with-input-file",level:2},{value:"Demo",id:"demo-1",level:4},{value:"Debug Without Recompiling",id:"debug-without-recompiling",level:2},{value:"Debug Tips &amp; Tricks",id:"debug-tips--tricks",level:2},{value:"Improve RTE Feedback In C++",id:"improve-rte-feedback-in-c",level:3},{value:"<code>cpbooster-config.json</code>",id:"cpbooster-configjson",level:5},{value:"Print Debug Lines In Red In C++",id:"print-debug-lines-in-red-in-c",level:3},{value:"<code>cpbooster-config.json</code>",id:"cpbooster-configjson-1",level:5},{value:"<code>program.cpp</code>",id:"programcpp",level:5},{value:"Debug Command In Python",id:"debug-command-in-python",level:3},{value:"<code>cpbooster-config.json</code>",id:"cpbooster-configjson-2",level:5},{value:"<code>program.py</code>",id:"programpy",level:5},{value:"Print Anything Like In Python With C++",id:"print-anything-like-in-python-with-c",level:3},{value:"<code>cpbooster-config.json</code>",id:"cpbooster-configjson-3",level:5},{value:"<code>program.cpp</code>",id:"programcpp-1",level:5}];function h(e){const n={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",h4:"h4",h5:"h5",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"cpbooster"})," provides a way for you to run your program using your debugging\nflags (",(0,t.jsx)("a",{href:"/docs/configuration#languageslangdebugcommand-string",style:{color:"white"},children:(0,t.jsx)(n.code,{children:"languages.<lang>.debugCommand"})}),").\nYou can pass the ",(0,t.jsx)(n.code,{children:"--debug"})," flag (or its alias which is just ",(0,t.jsx)(n.code,{children:"-d"}),") to the ",(0,t.jsx)(n.code,{children:"test"})," command for this."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-txt",children:"cpb t <filePath> -d\n"})}),"\n",(0,t.jsxs)(n.p,{children:["By default, this command will request keyboard input, just like if you executed ",(0,t.jsx)(n.code,{children:"./program.exe"})," or ",(0,t.jsx)(n.code,{children:"python program.py"}),".\nIf you wish to use a file as input See ",(0,t.jsx)(n.a,{href:"#debug-with-input-file",children:"Debug With Input File"}),"."]}),"\n",(0,t.jsx)(n.h4,{id:"demo",children:"Demo"}),"\n",(0,t.jsx)("div",{className:"text--center",children:(0,t.jsx)("img",{alt:"test",src:(0,c.Ay)("/img/demos/debug_keyboard.gif")})}),"\n",(0,t.jsx)("br",{}),"\n",(0,t.jsx)(n.admonition,{title:"NOTES",type:"note",children:(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["This command will ",(0,t.jsx)(n.strong,{children:"automatically compile"})," your program everytime you run it.\nSee ",(0,t.jsx)(n.a,{href:"#debug-without-recompiling",children:"Debug Without Recompiling"})," for details on how to avoid recompiling your program each time."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"cpbooster"})," does not print your debugging lines in red, this should be your code's behavior when running in debug mode.\nSee ",(0,t.jsx)(n.a,{href:"#debug-tips--tricks",children:"Debug Tips & Tricks"}),"."]}),"\n"]})}),"\n",(0,t.jsx)(n.h3,{id:"executable-file-details",children:"Executable File Details"}),"\n",(0,t.jsxs)(n.p,{children:["The executable file will be located in your current directory and its name will\nbe the concatenation of the source file name and the word ",(0,t.jsx)(n.strong,{children:'"debug"'})," followed by the extension\nwhich will be ",(0,t.jsx)(n.code,{children:".exe"}),". For example, if your source file name is ",(0,t.jsx)(n.code,{children:"ProblemA.cpp"})," then the executable file\nname will be ",(0,t.jsx)(n.code,{children:"ProblemAdebug.exe"}),". This is because ",(0,t.jsx)(n.code,{children:"cpbooster"})," uses filenames to associate everything\n(See ",(0,t.jsx)(n.a,{href:"/docs/clone#file-structure",children:(0,t.jsx)(n.strong,{children:"File Structure"})})," for better understanding).\nIf you wish to save the executable file with a different name,\nyou can specify it in your ",(0,t.jsx)("a",{href:"/docs/configuration#languageslangdebugcommand-string",style:{color:"white"},children:(0,t.jsx)(n.code,{children:"languages.<lang>.debugCommand"})}),"."]}),"\n",(0,t.jsx)(n.h2,{id:"debug-with-input-file",children:"Debug With Input File"}),"\n",(0,t.jsxs)(n.p,{children:["You can specify a test case to run in debugging mode using the ",(0,t.jsx)(n.code,{children:"--testId"})," flag or its alias ",(0,t.jsx)(n.code,{children:"-t"}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-txt",children:"cpb t <filePath> -t <number> -d\n"})}),"\n",(0,t.jsx)(n.admonition,{type:"note",children:(0,t.jsxs)(n.p,{children:["The only difference between the command used to ",(0,t.jsx)(n.a,{href:"/docs/test#test-with-a-single-test-case",children:"Test With A Single Test Case"})," and this one, is the\n",(0,t.jsx)(n.code,{children:"-d"})," flag at the end, which tells",(0,t.jsx)(n.code,{children:" cpbooster"})," to run in ",(0,t.jsx)(n.strong,{children:"debug"})," mode."]})}),"\n",(0,t.jsx)(n.h4,{id:"demo-1",children:"Demo"}),"\n",(0,t.jsx)("div",{className:"text--center",children:(0,t.jsx)("img",{alt:"test",src:(0,c.Ay)("/img/demos/debug_file.gif")})}),"\n",(0,t.jsx)(n.h2,{id:"debug-without-recompiling",children:"Debug Without Recompiling"}),"\n",(0,t.jsxs)(n.p,{children:["You can tell ",(0,t.jsx)(n.code,{children:"cpbooster"})," to run in ",(0,t.jsx)(n.strong,{children:"debug"})," mode using the last compiled version of your program\nby passing the flag ",(0,t.jsx)(n.code,{children:"--noCompile"})," or its alias  ",(0,t.jsx)(n.code,{children:"--nc"}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-txt",children:"cpb t <filePath> -d --nc\n"})}),"\n",(0,t.jsx)(n.admonition,{type:"caution",children:(0,t.jsxs)(n.p,{children:["By using this flag, ",(0,t.jsx)(n.code,{children:"cpbooster"})," will assume that there is a corresponding executable file\nfor your program. Remember that the name of the executable file must be the same as the\nsource file plus the word ",(0,t.jsx)(n.strong,{children:'"debug"'}),", followed by the extension which must be ",(0,t.jsx)(n.code,{children:".exe"}),". Unless you specified otherwise\nin ",(0,t.jsx)("a",{href:"/docs/configuration#languageslangdebugcommand-string",style:{color:"white"},children:(0,t.jsx)(n.code,{children:"languages.<lang>.debugCommand"})}),"."]})}),"\n",(0,t.jsx)(n.h2,{id:"debug-tips--tricks",children:"Debug Tips & Tricks"}),"\n",(0,t.jsx)(n.h3,{id:"improve-rte-feedback-in-c",children:"Improve RTE Feedback In C++"}),"\n",(0,t.jsxs)(n.p,{children:["You can use the following ",(0,t.jsx)(n.a,{href:"/docs/configuration#languageslangdebugcommand-string",children:"debug command"})," to get much better feedback in case of runtime errors."]}),"\n",(0,t.jsx)(n.h5,{id:"cpbooster-configjson",children:(0,t.jsx)(n.code,{children:"cpbooster-config.json"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\n  "debugCommand": "g++ -std=gnu++17 -O3 -DDEBUG -g -fsanitize=signed-integer-overflow -fsanitize=bounds-strict -fsanitize=address -fsanitize=integer-divide-by-zero -fsanitize=float-divide-by-zero -fsanitize=pointer-overflow -fsanitize=shift-exponent -fsplit-stack -Wshadow -Wall -fconcepts"\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"print-debug-lines-in-red-in-c",children:"Print Debug Lines In Red In C++"}),"\n",(0,t.jsx)(n.h5,{id:"cpbooster-configjson-1",children:(0,t.jsx)(n.code,{children:"cpbooster-config.json"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\n  "debugCommand": "g++ -DDEBUG"\n}\n'})}),"\n",(0,t.jsx)(n.h5,{id:"programcpp",children:(0,t.jsx)(n.code,{children:"program.cpp"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:'#include <bits/stdc++.h>\nusing namespace std;\n\n#define coutc cout << "\\033[48;5;196m\\033[38;5;15m" // red color code\n#define endlc "\\033[0m" << endl; // this resets the coloring\n\nint main() {\n  int a, b;\n  cin >> a >> b;\n#ifdef DEBUG\n  coutc << a << " " << b << endlc;\n#endif\n  cout << a + b << endl;\n  return 0;\n}\n'})}),"\n",(0,t.jsx)(n.admonition,{type:"note",children:(0,t.jsxs)(n.p,{children:["Here we used the ",(0,t.jsx)(n.code,{children:"-DDEBUG"})," flag in the debug command and therefore our ",(0,t.jsx)(n.code,{children:"#ifdef"})," statement\nshould check for the existence of ",(0,t.jsx)(n.code,{children:"DEBUG"}),". If we had specified a different flag name,\nfor example, ",(0,t.jsx)(n.code,{children:"-DHOLA"}),", then the ",(0,t.jsx)(n.code,{children:"#ifdef"})," statement should check the existence of ",(0,t.jsx)(n.code,{children:"HOLA"}),"."]})}),"\n",(0,t.jsx)(n.admonition,{type:"tip",children:(0,t.jsxs)(n.p,{children:["You can avoid writing ",(0,t.jsx)(n.code,{children:"#ifdef"})," every time if you use a well done template like ",(0,t.jsx)(n.a,{href:"https://gitlab.com/searleser97/competitive-programming-reference/-/blob/master/Reference/Coding%20Resources/C++/Competitive%20Programming%20Template.cpp",children:(0,t.jsx)(n.strong,{children:"THIS"})})," one,\nwhich allows you to use a ",(0,t.jsx)(n.code,{children:"debug(...)"})," function that can print ",(0,t.jsx)(n.strong,{children:"anything"})," that you pass to it.\nSee ",(0,t.jsx)(n.a,{href:"#print-anything-like-in-python-with-c",children:"Print Anything Like In Python With C++"}),"."]})}),"\n",(0,t.jsx)(n.h3,{id:"debug-command-in-python",children:"Debug Command In Python"}),"\n",(0,t.jsxs)(n.p,{children:["In ",(0,t.jsx)(n.code,{children:"Python"})," you can use the ",(0,t.jsx)(n.code,{children:"-O"})," flag to print statements just when this flag is used."]}),"\n",(0,t.jsx)(n.h5,{id:"cpbooster-configjson-2",children:(0,t.jsx)(n.code,{children:"cpbooster-config.json"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\n  "debugCommand": "python3.9 -O"\n}\n'})}),"\n",(0,t.jsx)(n.h5,{id:"programpy",children:(0,t.jsx)(n.code,{children:"program.py"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'if __debug__:\n  print("This line will be printed just when -O flag is used")\n'})}),"\n",(0,t.jsx)(n.h3,{id:"print-anything-like-in-python-with-c",children:"Print Anything Like In Python With C++"}),"\n",(0,t.jsxs)(n.p,{children:["Placing the following code on top of your source file, will enable you\nto use a ",(0,t.jsx)(n.code,{children:"debug(...)"})," function, which will work almost like the ",(0,t.jsx)(n.code,{children:"print(...)"})," function\nin python and it will just work if we pass the ",(0,t.jsx)(n.code,{children:"-DDEBUG"})," flag\nto the compilation command. This function can receive any amount of parameters and\nthey can be of almost any type, to be strict, it supports all primitive types\n(",(0,t.jsx)(n.code,{children:"bool, int, char, ..."}),"), all iterable types (",(0,t.jsx)(n.code,{children:"vector, map, set, deque, ..."}),") and some\nother types like ",(0,t.jsx)(n.code,{children:"pair"})," and ",(0,t.jsx)(n.code,{children:"tuple"}),"."]}),"\n",(0,t.jsx)(n.h5,{id:"cpbooster-configjson-3",children:(0,t.jsx)(n.code,{children:"cpbooster-config.json"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\n  "debugCommand": "g++ -std=gnu++17 -DDEBUG"\n}\n'})}),"\n",(0,t.jsx)(n.h5,{id:"programcpp-1",children:(0,t.jsx)(n.code,{children:"program.cpp"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:'#include <bits/stdc++.h>\nusing namespace std;\n\n#ifdef DEBUG\nstring to_string(char c) { return string({c}); }\n// 7\ntemplate<class... Ts>\nostream& operator<<(ostream& o, tuple<Ts...> t) {\n  string s = "(";\n  apply([&](auto&&... r) {\n    ((s += to_string(r) + ", "), ...); }, t);\n  return o << s.substr(0, len(s) - 2) + ")";\n}\n// 3\nostream& operator<<(ostream &o, pair<auto, auto> p) {\n  return o << "(" << p.fi << ", " << p.se << ")";\n}\n// 7\ntemplate<class C, class T = typename C::value_type,\ntypename std::enable_if<!std::is_same<C, std::string>\n::value>::type* = nullptr>\nostream& operator<<(ostream &o, C c) {\n  for (auto e : c) o << setw(7) << right << e;\n  return o << endc << endl << coutc;\n}\n// 7\nvoid debug(const auto &e, const auto &... r) {\n  cout << coutc << e;\n  ((cout << " " << r), ..., (cout << endc << endl));\n}\n#else\n#define debug(...)\n#endif\n'})})]})}function u(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(h,{...e})}):h(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>c,x:()=>r});var o=i(6540);const t={},s=o.createContext(t);function c(e){const n=o.useContext(s);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:c(e.components),o.createElement(s.Provider,{value:n},e.children)}}}]);